// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andromaril/agent-smith/internal/server/storage/storageDB (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	model "github.com/andromaril/agent-smith/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CounterAndGaugeUpdateMetrics mocks base method.
func (m *MockInterface) CounterAndGaugeUpdateMetrics(arg0 []model.Gauge, arg1 []model.Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterAndGaugeUpdateMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CounterAndGaugeUpdateMetrics indicates an expected call of CounterAndGaugeUpdateMetrics.
func (mr *MockInterfaceMockRecorder) CounterAndGaugeUpdateMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterAndGaugeUpdateMetrics", reflect.TypeOf((*MockInterface)(nil).CounterAndGaugeUpdateMetrics), arg0, arg1)
}

// GetCounter mocks base method.
func (m *MockInterface) GetCounter(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockInterfaceMockRecorder) GetCounter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockInterface)(nil).GetCounter), arg0)
}

// GetFloatMetric mocks base method.
func (m *MockInterface) GetFloatMetric() (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatMetric")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatMetric indicates an expected call of GetFloatMetric.
func (mr *MockInterfaceMockRecorder) GetFloatMetric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatMetric", reflect.TypeOf((*MockInterface)(nil).GetFloatMetric))
}

// GetGauge mocks base method.
func (m *MockInterface) GetGauge(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockInterfaceMockRecorder) GetGauge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockInterface)(nil).GetGauge), arg0)
}

// GetIntMetric mocks base method.
func (m *MockInterface) GetIntMetric() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntMetric")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntMetric indicates an expected call of GetIntMetric.
func (mr *MockInterfaceMockRecorder) GetIntMetric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntMetric", reflect.TypeOf((*MockInterface)(nil).GetIntMetric))
}

// Init mocks base method.
func (m *MockInterface) Init(arg0 string, arg1 context.Context) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockInterfaceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init), arg0, arg1)
}

// Load mocks base method.
func (m *MockInterface) Load(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockInterfaceMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockInterface)(nil).Load), arg0)
}

// NewCounter mocks base method.
func (m *MockInterface) NewCounter(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCounter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewCounter indicates an expected call of NewCounter.
func (mr *MockInterfaceMockRecorder) NewCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCounter", reflect.TypeOf((*MockInterface)(nil).NewCounter), arg0, arg1)
}

// NewGauge mocks base method.
func (m *MockInterface) NewGauge(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGauge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewGauge indicates an expected call of NewGauge.
func (mr *MockInterfaceMockRecorder) NewGauge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGauge", reflect.TypeOf((*MockInterface)(nil).NewGauge), arg0, arg1)
}

// Ping mocks base method.
func (m *MockInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInterface)(nil).Ping))
}

// Save mocks base method.
func (m *MockInterface) Save(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockInterfaceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInterface)(nil).Save), arg0)
}
